var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Component, Children } from 'react';
import warning from '../util/warn';
import * as PropTypes from 'prop-types';
// import PropTypes = require('prop-types');
// console.log('PropTypes :',PropTypes);
export var subscriptionShape = PropTypes.shape({
    trySubscribe: PropTypes.func.isRequired,
    tryUnsubscribe: PropTypes.func.isRequired,
    notifyNestedSubs: PropTypes.func.isRequired,
    isSubscribed: PropTypes.func.isRequired,
});
export var storeShape = PropTypes.shape({
    subscribe: PropTypes.func.isRequired,
    dispatch: PropTypes.func.isRequired,
    getState: PropTypes.func.isRequired
});
var didWarnAboutReceivingStore = false;
function warnAboutReceivingStore() {
    if (didWarnAboutReceivingStore) {
        return;
    }
    didWarnAboutReceivingStore = true;
    warning('<Provider> does not support changing `store` on the fly. ');
}
export function createProvider(storeKey) {
    if (storeKey === void 0) { storeKey = 'store'; }
    var Provider = (function (_super) {
        __extends(Provider, _super);
        function Provider(props, context) {
            var _this = _super.call(this, props, context) || this;
            _this[storeKey] = props.store;
            return _this;
        }
        Provider.prototype.getChildContext = function () {
            return _a = {}, _a[storeKey] = this[storeKey], _a;
            var _a;
        };
        Provider.prototype.componentWillReceiveProps = function (nextProps) { };
        Provider.prototype.render = function () {
            return Children.only(this.props.children);
        };
        Provider.propTypes = {
            store: storeShape.isRequired,
            children: PropTypes.element.isRequired,
        };
        Provider.childContextTypes = (_a = {},
            _a[storeKey] = storeShape.isRequired,
            _a);
        return Provider;
    }(Component));
    if (process.env.NODE_ENV !== 'production') {
        Provider.prototype.componentWillReceiveProps = function (nextProps) {
            if (this[storeKey] !== nextProps.store) {
                warnAboutReceivingStore();
            }
        };
    }
    return Provider;
    var _a;
}
export default createProvider();
