{"version":3,"sources":["es/succinct/index.js"],"names":["SUCCINCT_IDENTITY","succinct_id","Succinct","value","subcribes","id","subcribeMap","prototype","dispatch","func","forEach","subscrib","forceUpdate","removeSubscribe","ctx","cache","splice","index","get","key","host","addSuccinct","reaction","length","push","set","action"],"mappings":"AAAA,IAAIA,oBAAoB,UAAxB;AACA,IAAIC,cAAc,CAAlB;AACA,IAAIC,WAAY,YAAY;AACxB,aAASA,QAAT,CAAkBC,KAAlB,EAAyBC,SAAzB,EAAoC;AAChC,YAAID,UAAU,KAAK,CAAnB,EAAsB;AAAEA,oBAAQ,EAAR;AAAa;AACrC,YAAIC,cAAc,KAAK,CAAvB,EAA0B;AAAEA,wBAAY,EAAZ;AAAiB;AAC7C,aAAKD,KAAL,GAAaA,KAAb;AACA,aAAKE,EAAL,GAAUJ,aAAV;AACA,aAAKK,WAAL,GAAmB,EAAnB;AACA,aAAKF,SAAL,GAAiBA,SAAjB;AACH;AACDF,aAASK,SAAT,CAAmBC,QAAnB,GAA8B,UAAUC,IAAV,EAAgB;AAC1CA;AACA,aAAKL,SAAL,IAAkB,KAAKA,SAAL,CAAeM,OAAf,CAAuB,UAAUC,QAAV,EAAoB;AACzDA,qBAASC,WAAT;AACH,SAFiB,CAAlB;AAGH,KALD;AAMAV,aAASK,SAAT,CAAmBM,eAAnB,GAAqC,UAAUC,GAAV,EAAe;AAChD,YAAIC,QAAQ,KAAKT,WAAL,CAAiBQ,IAAIT,EAArB,CAAZ;AACA,aAAKC,WAAL,CAAiBQ,IAAIT,EAArB,IAA2B,IAA3B;AACA,aAAKD,SAAL,CAAeY,MAAf,CAAsBD,MAAME,KAA5B,EAAmC,CAAnC;AACH,KAJD;AAKAf,aAASK,SAAT,CAAmBW,GAAnB,GAAyB,UAAUC,GAAV,EAAeL,GAAf,EAAoB;AACzC,YAAIA,OAAOA,IAAIM,IAAf,EAAqB;AACjBN,gBAAIO,WAAJ,CAAgB,IAAhB;AACA,gBAAI,CAAC,KAAKf,WAAL,CAAiBQ,IAAIT,EAArB,CAAL,EAA+B;AAC3B,qBAAKC,WAAL,CAAiBQ,IAAIT,EAArB,IAA2B;AACvBiB,8BAAUR,GADa;AAEvBG,2BAAO,KAAKb,SAAL,CAAemB;AAFC,iBAA3B;AAIA,qBAAKnB,SAAL,CAAeoB,IAAf,CAAoBV,IAAIM,IAAxB;AACH;AACJ;AACD,eAAO,KAAKjB,KAAL,CAAWgB,GAAX,CAAP;AACH,KAZD;AAaAjB,aAASK,SAAT,CAAmBkB,GAAnB,GAAyB,UAAUN,GAAV,EAAehB,KAAf,EAAsB;AAC3C,aAAKA,KAAL,CAAWgB,GAAX,IAAkBhB,KAAlB;AACH,KAFD;AAGAD,aAASK,SAAT,CAAmBmB,MAAnB,GAA4B,UAAUP,GAAV,EAAehB,KAAf,EAAsB;AAC9C,aAAKA,KAAL,CAAWgB,GAAX,IAAkB,KAAKX,QAAL,CAAcL,KAAd,CAAlB;AACH,KAFD;AAGA,WAAOD,QAAP;AACH,CAxCe,EAAhB;AAyCA,eAAeA,QAAf","file":"index.js","sourceRoot":"/Users/sheweichun/opensource/succinct/packages/succinct","sourcesContent":["var SUCCINCT_IDENTITY = 'Succinct';\nvar succinct_id = 0;\nvar Succinct = (function () {\n    function Succinct(value, subcribes) {\n        if (value === void 0) { value = {}; }\n        if (subcribes === void 0) { subcribes = []; }\n        this.value = value;\n        this.id = succinct_id++;\n        this.subcribeMap = {};\n        this.subcribes = subcribes;\n    }\n    Succinct.prototype.dispatch = function (func) {\n        func();\n        this.subcribes && this.subcribes.forEach(function (subscrib) {\n            subscrib.forceUpdate();\n        });\n    };\n    Succinct.prototype.removeSubscribe = function (ctx) {\n        var cache = this.subcribeMap[ctx.id];\n        this.subcribeMap[ctx.id] = null;\n        this.subcribes.splice(cache.index, 1);\n    };\n    Succinct.prototype.get = function (key, ctx) {\n        if (ctx && ctx.host) {\n            ctx.addSuccinct(this);\n            if (!this.subcribeMap[ctx.id]) {\n                this.subcribeMap[ctx.id] = {\n                    reaction: ctx,\n                    index: this.subcribes.length\n                };\n                this.subcribes.push(ctx.host);\n            }\n        }\n        return this.value[key];\n    };\n    Succinct.prototype.set = function (key, value) {\n        this.value[key] = value;\n    };\n    Succinct.prototype.action = function (key, value) {\n        this.value[key] = this.dispatch(value);\n    };\n    return Succinct;\n}());\nexport default Succinct;\n"]}