var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { Model } from '../../../lib/index';

var Counter = Model(_class = function () {
    function Counter(initState) {
        _classCallCheck(this, Counter);

        this.value = initState;
    }

    _createClass(Counter, [{
        key: 'add',
        value: function add() {
            this.value++;
        }
    }, {
        key: 'minus',
        value: function minus() {
            this.value--;
        }
    }]);

    return Counter;
}()) || _class;

export { Counter as default };