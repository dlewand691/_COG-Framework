var __extends = this && this.__extends || function () {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function (d, b) {
        d.__proto__ = b;
    } || function (d, b) {
        for (var p in b) {
            if (b.hasOwnProperty(p)) d[p] = b[p];
        }
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var warn_1 = require("../util/warn");
var PropTypes = require("prop-types");
// import PropTypes = require('prop-types');
// console.log('PropTypes :',PropTypes);
exports.subscriptionShape = PropTypes.shape({
    trySubscribe: PropTypes.func.isRequired,
    tryUnsubscribe: PropTypes.func.isRequired,
    notifyNestedSubs: PropTypes.func.isRequired,
    isSubscribed: PropTypes.func.isRequired
});
exports.storeShape = PropTypes.shape({
    subscribe: PropTypes.func.isRequired,
    dispatch: PropTypes.func.isRequired,
    getState: PropTypes.func.isRequired
});
var didWarnAboutReceivingStore = false;
function warnAboutReceivingStore() {
    if (didWarnAboutReceivingStore) {
        return;
    }
    didWarnAboutReceivingStore = true;
    warn_1.default('<Provider> does not support changing `store` on the fly. ');
}
function createProvider(storeKey) {
    if (storeKey === void 0) {
        storeKey = 'store';
    }
    var Provider = function (_super) {
        __extends(Provider, _super);
        function Provider(props, context) {
            var _this = _super.call(this, props, context) || this;
            _this[storeKey] = props.store;
            return _this;
        }
        Provider.prototype.getChildContext = function () {
            return _a = {}, _a[storeKey] = this[storeKey], _a;
            var _a;
        };
        Provider.prototype.componentWillReceiveProps = function (nextProps) {};
        Provider.prototype.render = function () {
            return React.Children.only(this.props.children);
        };
        Provider.propTypes = {
            store: exports.storeShape.isRequired,
            children: PropTypes.element.isRequired
        };
        Provider.childContextTypes = (_a = {}, _a[storeKey] = exports.storeShape.isRequired, _a);
        return Provider;
    }(React.Component);
    if (process.env.NODE_ENV !== 'production') {
        Provider.prototype.componentWillReceiveProps = function (nextProps) {
            if (this[storeKey] !== nextProps.store) {
                warnAboutReceivingStore();
            }
        };
    }
    return Provider;
    var _a;
}
exports.createProvider = createProvider;
exports.default = createProvider();