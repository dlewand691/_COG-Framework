import { IDENTITY } from '../commons/constant';
import Succinc from '../succinct';
import Context from '../context';
function initialSuccinc(value) {
    if (value[IDENTITY]) return;
    value[IDENTITY] = new Succinc();
}
// function enhancerModel<T>(target: new (state: any) => T, value: any);
// function enhancerModel<T>(target: new (state: any) => T, value: any, key: string, descriptor: Descriptor);
function enhancerModel(target, value, key, descriptor) {
    // if (key && descriptor) {
    // }
    // return new target(value); 
    initialSuccinc(value);
    var des = {
        configurable: true,
        enumerable: descriptor.enumerable,
        get: function get() {
            var currentContext = Context.getContext();
            return this[IDENTITY].get(key, currentContext);
        },
        set: function set(newValue) {
            this[IDENTITY].set(new target(newValue));
        }
    };
    return des;
}
export default function Model(target) {
    return enhancerModel.bind(null, target);
}